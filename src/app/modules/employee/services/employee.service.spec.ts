import { TestBed } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { EmployeeService } from './employee.service';
import { Employee } from '../models/employee'; // Ensure this path is correct for your Employee class
describe('EmployeeService', () => {
  let service: EmployeeService;
  let httpMock: HttpTestingController;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [EmployeeService],
    });
    service = TestBed.inject(EmployeeService);
    httpMock = TestBed.inject(HttpTestingController);
  });

  afterEach(() => {
    httpMock.verify(); // Ensure no outstanding HTTP requests
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  it('should get all employees', () => {
    // Create instances of the Employee class for dummy data
    const dummyEmployees: Employee[] = [
      {
        employeeId: 1,                                  // employeeId (first argument, must be number)
        hireDate: new Date('2023-01-15T09:00:00.000Z'), // hireDate
        name: 'John Doe',                               // name
        email: 'john.doe@example.com',                 // email
        department: 'Engineering',                     // department
        jobTitle: 'Software Engineer',                 // jobTitle
        password: 'hashedpassword1'                    // password
      },
      {
        employeeId: 2,
        hireDate: new Date('2022-07-01T10:30:00.000Z'),
        name: 'Jane Smith',
        email: 'jane.smith@example.com',
        department: 'Marketing',
        jobTitle: 'Marketing Specialist',
        password: 'hashedpassword2'
      },
    ];

    service.getEmployeeList().subscribe((employees) => {
      expect(employees.length).toBe(2);
      expect(employees).toEqual(dummyEmployees);
    });

    const req = httpMock.expectOne('http://localhost:2694/employee/');
    expect(req.request.method).toBe('GET');
    req.flush(dummyEmployees);
  });

  it('should get employee by ID', () => {
    // Create an instance of the Employee class for dummy data
    const dummyEmployee: Employee = {
      employeeId: 1,                                  // employeeId
      hireDate: new Date('2023-01-15T09:00:00.000Z'),
      name: 'John Doe',
      email: 'john.doe@example.com',
      department: 'Engineering',
      jobTitle: 'Software Engineer',
      password: 'hashedpassword1'
    };

    service.getEmployeeById(1).subscribe((employee) => {
      expect(employee).toEqual(dummyEmployee);
    });

    const req = httpMock.expectOne('http://localhost:2694/employee/1');
    expect(req.request.method).toBe('GET');
    req.flush(dummyEmployee);
  });

  it('should add a new employee', () => {
    // When adding, employeeId is typically not yet known, so you might need to handle this
    // If your backend assigns an ID, you'd model the *response* to include it.
    // The 'addEmployee' service method takes 'employee: any', so you can send a partial object.
    const newEmployeeDataToSend = {
      hireDate: new Date('2024-03-20T11:00:00.000Z'),
      name: 'Alice Brown',
      email: 'alice.brown@example.com',
      department: 'HR',
      jobTitle: 'HR Associate',
      password: 'newemployee123'
    };

    // The backend usually returns the complete object, including the new ID
    // So, this is how you simulate the *response* from the backend
    const expectedResponseEmployee: Employee = {
      employeeId: 3, // Simulate the ID generated by the backend
      hireDate: new Date('2024-03-20T11:00:00.000Z'),
      name: 'Alice Brown',
      email: 'alice.brown@example.com',
      department: 'HR',
      jobTitle: 'HR Associate',
      password: 'newemployee123'
    };

    service.addEmployee(newEmployeeDataToSend).subscribe((response) => {
      expect(response).toEqual(expectedResponseEmployee);
    });

    const req = httpMock.expectOne('http://localhost:2694/employee/add');
    expect(req.request.method).toBe('POST');
    expect(req.request.headers.get('Content-Type')).toBe('application/json');
    req.flush(expectedResponseEmployee);
  });

  it('should update an employee', () => {
    // Create an instance of the Employee class for the updated data
    const updatedEmployee: Employee = {
      employeeId: 1, // employeeId
      hireDate: new Date('2023-01-15T09:00:00.000Z'),
      name: 'Johnathan Doe', // Name updated
      email: 'john.doe@example.com',
      department: 'Engineering',
      jobTitle: 'Senior Software Engineer', // Job Title updated
      password: 'hashedpassword1'
    };

    service.updateEmployee(1, updatedEmployee).subscribe((response) => {
      expect(response).toEqual(updatedEmployee);
    });

    const req = httpMock.expectOne('http://localhost:2694/employee/1');
    expect(req.request.method).toBe('PUT');
    req.flush(updatedEmployee);
  });

  it('should delete an employee', () => {
    const idToDelete = 2;

    service.deleteEmployee(idToDelete).subscribe((response) => {
      expect(response).toBeNull();
    });

    const req = httpMock.expectOne(`http://localhost:2694/employee/${idToDelete}`);
    expect(req.request.method).toBe('DELETE');
    req.flush(null);
  });
});